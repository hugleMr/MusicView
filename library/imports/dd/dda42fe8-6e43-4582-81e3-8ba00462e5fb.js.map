{"version":3,"sources":["../../../../assets/scripts/assets/scripts/music.js"],"names":["cc","Class","extends","Component","properties","music","type","AudioClip","default","mgr","Node","item","Prefab","onLoad","console","log","n","w","i","instantiate","addChild","width","height","y","x","eddyStyle","window","AudioContext","webkitAudioContext","mozAudioContext","msAudioContext","circleStyle","value_R","angle","all_item","children","value_angle","Math","floor","pos","calculatePosition","sinStyle","sin","onClick","audioContext","audioBufferSourceNode","createBufferSource","buffer","_audio","analyser","createAnalyser","fftSize","connect","destination","start","onStop","stop","update","dt","dataArray","Uint8Array","frequencyBinCount","getByteFrequencyData","draw","count","h","r","PI","cos","v2"],"mappings":"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","file":"music.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        music: {\n            type: cc.AudioClip,\n            default: null\n        },\n        mgr: cc.Node,\n        item: cc.Prefab\n    },\n\n    onLoad () {\n        console.log(this.music);\n\n        this.n = 128;\n        // all items\n        let w = 1280;\n        for (let i = 0; i < this.n; i++) {\n            let item = cc.instantiate(this.item);\n            this.mgr.addChild(item);\n            let width = item.width;\n            item.height = 5;\n            item.y = 0;\n            item.x = -(this.n/2)*(width + 4) + i * width + i*4 + width/2;\n        }\n\n        this.eddyStyle();\n        \n        // Handle different platforms\n        window.AudioContext = window.AudioContext || window.webkitAudioContext || window.mozAudioContext || window.msAudioContext;\n    },\n\n    circleStyle(){\n        let value_R = 120;\n        let angle = 360/this.n;\n        let all_item = this.mgr.children;\n        for(let i = 0; i < this.n; i++){\n            let item = all_item[i];\n            let value_angle = (i - Math.floor(this.n/2))*angle;\n            let pos = this.calculatePosition(value_angle,value_R);\n            item.angle = -value_angle;\n            item.x = pos.x;\n            item.y = pos.y;\n        }\n    },\n\n    eddyStyle(){\n        let value_R = 200;\n        let angle = 360/this.n;\n        let all_item = this.mgr.children;\n        for(let i = 0; i < this.n; i++){\n            let item = all_item[i];\n            let value_angle = (i - Math.floor(this.n/2))*angle;\n            let pos = this.calculatePosition(value_angle,value_R);\n            item.angle = -value_angle;\n            item.x = pos.x;\n            item.y = pos.y;\n\n            value_R -= 0.5;\n        }\n    },\n\n    sinStyle(){\n        let value_R = 120;\n        let angle = 360/this.n;\n        let all_item = this.mgr.children;\n        for(let i = 0; i < this.n; i++){\n            let item = all_item[i];\n            let value_angle = (i - Math.floor(this.n/2))*angle;\n            let x = (i - Math.floor(this.n/2))*item.width*2;\n            let y = x*sin\n            item.angle = -value_angle;\n            item.x = pos.x;\n            item.y = pos.y;\n\n            value_R -= 0.5;\n        }\n    },\n\n    onClick () {\n        let AudioContext = window.AudioContext;\n        // audioContext is only equivalent to a container.\n        let audioContext = new AudioContext();\n        // To make the audioContext really rich, you need to pass it the actual music information.\n        // That is, the AudioBuffer data is passed in.\n        // Here's how to create an audio resource node manager.\n        this.audioBufferSourceNode = audioContext.createBufferSource();\n        // Pass AudioBuffer in.\n        this.audioBufferSourceNode.buffer = this.music._audio;\n        // Create the analyzer.\n        this.analyser = audioContext.createAnalyser();\n         // precision setting\n        this.analyser.fftSize = 256;\n        // Connect to the analyzer before passing to the speaker.\n        this.audioBufferSourceNode.connect(this.analyser);\n         // Connect to speakers.\n        this.analyser.connect(audioContext.destination);\n        // Start playing\n        this.audioBufferSourceNode.start(0);\n    },\n\n    onStop () {\n        this.audioBufferSourceNode.stop();\n    },\n\n    update (dt) {\n         // wait for it to be ready\n        if (!this.analyser) return;\n        // Create data and accept data\n        this.dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n        // The analysis results are stored in an array.\n        this.analyser.getByteFrequencyData(this.dataArray);\n        this.draw(this.dataArray);\n    },\n\n    draw (dataArray) {\n        // value customization\n        // 960/40 has 24; 128/this.n gets 1\n        let count = 0;\n        for (let i = 0; i < this.n; i++) {\n            let h = dataArray[i]/2;\n            if (h < 5/2){\n                count++;\n                h = dataArray[i - count]/2;\n                h = 5;\n            }\n            //h = 5;\n            this.mgr.children[i].height = h;\n        }\n    },\n\n    calculatePosition(angle,r){\n        angle = angle*(Math.PI/180);\n        let x = r * Math.sin(angle);\n        let y = r * Math.cos(angle);\n        return cc.v2(x,y);\n    },\n\n});\n"]}